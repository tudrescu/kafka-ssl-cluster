---
version: '3.5'

networks:
  default:
    name: kafka_network
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:${CP_TAG}
    hostname: zookeeper
    container_name: kafka_zookeeper
    volumes:
      - ./jmx_prometheus:/opt/jmx_prometheus
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/zookeeper-config.yml

  broker-1:
    image: confluentinc/cp-kafka:${CP_TAG}
    hostname: broker-1
    container_name: kafka_broker-1
    depends_on:
      - zookeeper
    networks:
      default:
        ipv4_address: 10.5.0.101
    ports:
      - "17072:7072"
    volumes:
      - ./jmx_prometheus:/opt/jmx_prometheus
      - ./certs:/etc/kafka/secrets/
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL_SSL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL_SSL:SSL,EXTERNAL_SSL:SSL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL_SSL://broker-1:9092,EXTERNAL_SSL://broker-1:9093
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_SSL_KEYSTORE_FILENAME: broker-1.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka.key
      KAFKA_SSL_KEY_CREDENTIALS: kafka.key
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafka.key
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.server.truststore.jks
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml -javaagent:/opt/jmx_prometheus/jolokia-agent.jar=port=7072,host=*
      KAFKA_METRIC_REPORTERS:
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

  broker-2:
    image: confluentinc/cp-kafka:${CP_TAG}
    hostname: broker-2
    container_name: kafka_broker-2
    depends_on:
      - zookeeper
    networks:
      default:
        ipv4_address: 10.5.0.102
    ports:
      - "27072:7072"
    volumes:
      - ./jmx_prometheus:/opt/jmx_prometheus
      - ./certs:/etc/kafka/secrets/
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL_SSL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL_SSL:SSL,EXTERNAL_SSL:SSL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL_SSL://broker-2:9092,EXTERNAL_SSL://broker-2:9093
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_SSL_KEYSTORE_FILENAME: broker-2.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka.key
      KAFKA_SSL_KEY_CREDENTIALS: kafka.key
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafka.key
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.server.truststore.jks
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml -javaagent:/opt/jmx_prometheus/jolokia-agent.jar=port=7072,host=*
      KAFKA_METRIC_REPORTERS:
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

  broker-3:
    image: confluentinc/cp-kafka:${CP_TAG}
    hostname: broker-3
    container_name: kafka_broker-3
    depends_on:
      - zookeeper
    networks:
      default:
        ipv4_address: 10.5.0.103
    ports:
      - "37072:7072"
    volumes:
      - ./jmx_prometheus:/opt/jmx_prometheus
      - ./certs:/etc/kafka/secrets/
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL_SSL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL_SSL:SSL,EXTERNAL_SSL:SSL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL_SSL://broker-3:9092,EXTERNAL_SSL://broker-3:9093
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_SSL_KEYSTORE_FILENAME: broker-3.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka.key
      KAFKA_SSL_KEY_CREDENTIALS: kafka.key
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafka.key
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.server.truststore.jks
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml -javaagent:/opt/jmx_prometheus/jolokia-agent.jar=port=7072,host=*
      KAFKA_METRIC_REPORTERS:
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

  broker-4:
    image: confluentinc/cp-kafka:${CP_TAG}
    hostname: broker-4
    container_name: kafka_broker-4
    depends_on:
      - zookeeper
    networks:
      default:
        ipv4_address: 10.5.0.104
    ports:
      - "47072:7072"
    volumes:
      - ./jmx_prometheus:/opt/jmx_prometheus
      - ./certs:/etc/kafka/secrets/
    environment:
      KAFKA_BROKER_ID: 4
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL_SSL
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL_SSL:SSL,EXTERNAL_SSL:SSL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL_SSL://broker-4:9092,EXTERNAL_SSL://broker-4:9093
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 500
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_SSL_KEYSTORE_FILENAME: broker-4.keystore.jks
      KAFKA_SSL_KEYSTORE_CREDENTIALS: kafka.key
      KAFKA_SSL_KEY_CREDENTIALS: kafka.key
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SSL_TRUSTSTORE_CREDENTIALS: kafka.key
      KAFKA_SSL_TRUSTSTORE_FILENAME: kafka.server.truststore.jks
      KAFKA_OPTS: -javaagent:/opt/jmx_prometheus/jmx_prometheus_javaagent.jar=7071:/opt/jmx_prometheus/kafka-config.yml -javaagent:/opt/jmx_prometheus/jolokia-agent.jar=port=7072,host=*
      KAFKA_METRIC_REPORTERS:
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

  jumphost:
    image: confluentinc/cp-kafka:${CP_TAG}
    hostname: jumphost
    container_name: kafka_jumphost
    volumes:
      - ./certs:/certs
      - ./jumphost:/opt/bin
    entrypoint: /bin/bash -c "while true; do sleep 300; done;"

  kafkacat:
      image: edenhill/kafkacat:${KAFKACAT_VERSION}
      container_name: kafkacat
      volumes:
        - ./assets/kafkacat/kafkacat-template.conf:/home/.config/kafkacat.conf
        - ./assets/kafkacat/produce-test:/usr/bin/produce-test
        - ./assets/kafkacat/topic-list:/usr/bin/topic-list
        - ./assets/bash/bashrc:/root/.bashrc
        - ./assets/kafkacat/data.txt:/data.txt
        - ./assets/bash/bash_aliases:/root/.bash_aliases
        - ./certs:/certs
      environment:
        - KAFKACAT_CONFIG=/home/.config/kafkacat.conf
      entrypoint: 
        - /bin/sh 
        - -c 
        - |
          apk add jq;
          apk add bash;
          apk add openssl;
          while [ 1 -eq 1 ]; do sleep 60; done;

  akhq:
    image: tchiotludo/akhq:${AKHQ_VERSION}
    container_name: akhq
    volumes:
      - ./certs:/certs
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "broker-1:9093,broker-2:9093,broker-3:9093,broker-4:9093"
                security.protocol: SSL
                ssl.truststore.location: /certs/kafka.server.truststore.jks
                ssl.truststore.password: dev_cluster_secret
                ssl.keystore.location: /certs/akhq.keystore.jks
                ssl.keystore.password: dev_cluster_secret
                ssl.key.password: dev_cluster_secret
    ports:
      - "8080:8080"
    depends_on:
      - broker-1
      - broker-2
      - broker-3
      - broker-4

  kafka-manager:
    image: hlebalbau/kafka-manager:${KAFKA_MANAGER_VERSION}
    hostname: kafka-manager
    hostname: jumphost
    container_name: kafka-manager
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: "zookeeper:2181"
      APPLICATION_SECRET: "3833be9353ae4ca788d66414f58a1ac4" # used internally for signing session cookies, CSRF tokens and built in encryption utilities
    depends_on:
      - zookeeper
      - broker-1
      - broker-2
      - broker-3
      - broker-4
    volumes:
      - ./assets/cmak/kafka-manager-config.sh:/kafka-manager-config.sh
      - ./assets/cmak/consumer.properties:/kafka-manager/conf/consumer-properties
      - ./certs:/certs
    entrypoint:
      - /bin/bash
      - -c 
      - |
        echo "# Bootstraping CMAK"
        # remove advanced features
        sed -i 's#,"KMPreferredReplicaElectionFeature","KMReassignPartitionsFeature", "KMScheduleLeaderElectionFeature"##g' /kafka-manager/conf/application.conf
        # start CMAK
        /kafka-manager/bin/cmak -Dpidfile.path=/dev/null -Dapplication.home=/kafka-manager &
        # configure CMAK
        /kafka-manager-config.sh
        sleep infinity 
